<%-- 
Name:  			ASP.NET Gridview stubber
Author: 		Joe Audette
Description: 	Generates a stub for Gridview with paging and sorting
Last Modified:	2/20/2007

--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Author" Type="System.String" Default="Joe Audette" Category="Style" Description="Author" %>
<%@ Property Name="BusinessLayerNameSpace" Type="System.String" Default="mojoPortal.Business" Category="Style" Description="The Namespace of the Business Layer class" %>

<%@ Property Name="ResourceFileNameSpace" Type="System.String" Default="Resources" Category="Style" Description="" %>

<%@ Property Name="TablePrefix" Type="System.String" Default="mp_" Category="Style" Description="Table Prfix" %>

<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>

<% if (SourceTable.PrimaryKey == null) throw new ApplicationException("SourceTable does not contain a primary key."); %>
<% ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0]; %>

<asp:Panel id="pnl<%= GetClassName() %>" runat="server" CssClass="modulecontent">
<h1 class="heading"><asp:Literal ID="litHeading" runat="server" /></h1>
<asp:GridView ID="grd<%= GetClassName() %>" runat="server"
     AllowPaging="true"
     AllowSorting="true"
     AutoGenerateColumns="false" 
     CssClass="editgrid"
     DataKeyNames="<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %><%= SourceTable.PrimaryKey.MemberColumns[i].Name %><% } %>"
     SkinID="plain">
     <Columns>
		<asp:TemplateField ItemStyle-CssClass="editgridcell" HeaderStyle-CssClass="editgridheader">
        <ItemTemplate>
                <asp:ImageButton ID="btnEdit" runat="server" 
                    CommandName="Edit" ToolTip='<%%# Resources.<%= ResourceFileNameSpace %>.<%= GetClassName() %>GridEditButton %%>'
                    AlternateText='<%%# Resources.<%= ResourceFileNameSpace %>.<%= GetClassName() %>GridEditButton %%>'
                    ImageUrl="~/Data/SiteImages/edit.gif" />
            </ItemTemplate>
            <EditItemTemplate>
                <asp:Button id="btnGridUpdate" runat="server" Text='<%%# Resources.<%= ResourceFileNameSpace %>.<%= GetClassName() %>GridUpdateButton %%>' CommandName="Update" />
                <asp:Button id="btnGridDelete" runat="server" Text='<%%# Resources.<%= ResourceFileNameSpace %>.<%= GetClassName() %>GridDeleteButton %%>' CommandName="Delete" />
                <asp:Button id="btnGridCancel" runat="server" Text='<%%# Resources.<%= ResourceFileNameSpace %>.<%= GetClassName() %>GridCancelButton %%>' CommandName="Cancel" />
            </EditItemTemplate>
        </asp:TemplateField>
        <% for (int i = 0; i < this.SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
		<asp:TemplateField SortExpression="<%= SourceTable.NonPrimaryKeyColumns[i].Name %>" ItemStyle-CssClass="editgridcell" HeaderStyle-CssClass="editgridheader">
			<ItemTemplate>
                <%%# Eval("<%= SourceTable.NonPrimaryKeyColumns[i].Name %>") %%>
            </ItemTemplate>
			<EditItemTemplate>
			<asp:TextBox ID="txt<%= SourceTable.NonPrimaryKeyColumns[i].Name %>" Columns="20" Text='<%%# Eval("<%= SourceTable.NonPrimaryKeyColumns[i].Name %>") %%>' runat="server" MaxLength="<%= this.SourceTable.NonPrimaryKeyColumns[i].Size %>" />
			</EditItemTemplate>
		</asp:TemplateField>
		<% } %> 
</Columns>
</asp:GridView>
<div class="modulepager" style="float:left; clear:left;">
    <asp:Button ID="btnAddNew" runat="server"  />
    <mp:CutePager ID="pgr<%= GetClassName() %>" runat="server" />
</div>
<br class="clear" />
</asp:Panel>

using <%= BusinessLayerNameSpace %>;

this.grd<%= GetClassName() %>.Sorting += new GridViewSortEventHandler(grd<%= GetClassName() %>_Sorting);
this.grd<%= GetClassName() %>.RowEditing += new GridViewEditEventHandler(grd<%= GetClassName() %>_RowEditing);
this.grd<%= GetClassName() %>.RowCancelingEdit += new GridViewCancelEditEventHandler(grd<%= GetClassName() %>_RowCancelingEdit);
this.grd<%= GetClassName() %>.RowUpdating += new GridViewUpdateEventHandler(grd<%= GetClassName() %>_RowUpdating);
this.grd<%= GetClassName() %>.RowDeleting += new GridViewDeleteEventHandler(grd<%= GetClassName() %>_RowDeleting);
this.btnAddNew.Click += new EventHandler(btnAddNew_Click);


private void BindGrid()
{
    DataTable dt = <%= GetClassName() %>.GetPage(pageNumber, pageSize);
    
    if (dt.Rows.Count > 0)
    {
        totalPages = Convert.ToInt32(dt.Rows[0]["TotalPages"]);
    }

    DataView dv = dt.DefaultView;
    dv.Sort = sort;
    
    if (this.totalPages > 1)
    {
        Literal pageLinks = new Literal();
		// TODO: edit this, fix the path
        string pageUrl = SiteUtils.GetNavigationSiteRoot() + "/YourFolder/Admin<%= GetClassName() %>.aspx"
            + "?pageid=" + PageID.ToString(CultureInfo.InvariantCulture)
            + "&amp;mid=" + ModuleID.ToString(CultureInfo.InvariantCulture)
            + "&amp;sort" + this.ModuleID.ToString(CultureInfo.InvariantCulture)
            + "=" + this.sort
            + "&amp;pagenumber" + this.ModuleID.ToString(CultureInfo.InvariantCulture) 
			+ "={0}";
			
		pgr<%= GetClassName() %>.PageURLFormat = pageUrl;
        pgr<%= GetClassName() %>.ShowFirstLast = true;
        pgr<%= GetClassName() %>.CurrentIndex = pageNumber;
        pgr<%= GetClassName() %>.PageSize = pageSize;
        pgr<%= GetClassName() %>.PageCount = totalPages;

    }
	
	grd<%= GetClassName() %>.DataSource = dv;
    grd<%= GetClassName() %>.PageIndex = pageNumber;
    grd<%= GetClassName() %>.PageSize = pageSize;
    grd<%= GetClassName() %>.DataBind();

}

void grd<%= GetClassName() %>_Sorting(object sender, GridViewSortEventArgs e)
{
	// TODO: fix path
    String redirectUrl = SiteUtils.GetNavigationSiteRoot()
        + "/YourPath/Admin<%= GetClassName() %>.aspx?pageid=" + PageID.ToString(CultureInfo.InvariantCulture)
        + "&mid=" + ModuleID.ToString(CultureInfo.InvariantCulture)
        + "&pagenumber"
        + ModuleID.ToString(CultureInfo.InvariantCulture)
        + "=" + pageNumber.ToString(CultureInfo.InvariantCulture)
        + "&sort"
        + ModuleID.ToString(CultureInfo.InvariantCulture)
        + "=" + e.SortExpression;

    WebUtils.SetupRedirect(this, redirectUrl);
    
}

void grd<%= GetClassName() %>_RowUpdating(object sender, GridViewUpdateEventArgs e)
{
    GridView grid = (GridView)sender;
	
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %> <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %> = (<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>)grid.DataKeys[e.RowIndex].Value;
	<% } %> 
	<% for (int i = 0; i < this.SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	TextBox txt<%= this.SourceTable.NonPrimaryKeyColumns[i].Name %>  = (TextBox)grid.Rows[e.RowIndex].Cells[1].FindControl("txt<%= this.SourceTable.NonPrimaryKeyColumns[i].Name %>");
	<% } %> 

	// TODO: implement update
	// instantiate business class
	<% for (int i = 0; i < this.SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	//<%= GetPrivateName(GetClassName()) %>.<%= this.SourceTable.NonPrimaryKeyColumns[i].Name %>  = txt<%= this.SourceTable.NonPrimaryKeyColumns[i].Name %>.Text;
	<% } %> 
	//<%= GetPrivateName(GetClassName()) %>.Save();

    WebUtils.SetupRedirect(this, Request.RawUrl);
    
}

void grd<%= GetClassName() %>_RowDeleting(object sender, GridViewDeleteEventArgs e)
{
    GridView grid = (GridView)sender;
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %> <%= GetParamName(SourceTable.PrimaryKey.MemberColumns[i].Name) %> = (<%= GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>)grid.DataKeys[e.RowIndex].Value;
	<% } %> 
	<% for (int i = 0; i < this.SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetClassName() %>.Delete(<%= GetParamName(this.SourceTable.PrimaryKey.MemberColumns[i].Name) %>);
	<% } %> 
	WebUtils.SetupRedirect(this, Request.RawUrl);
    
}

void grd<%= GetClassName() %>_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
{
    WebUtils.SetupRedirect(this, Request.RawUrl);
}

void grd<%= GetClassName() %>_RowEditing(object sender, GridViewEditEventArgs e)
{
    GridView grid = (GridView)sender;
    grid.EditIndex = e.NewEditIndex;
    BindGrid();
	
	Button btnDelete = (Button)grid.Rows[e.NewEditIndex].Cells[0].FindControl("btnGridDelete");
    if (btnDelete != null)
    {
        btnDelete.Attributes.Add("OnClick", "return confirm('"
            + "Are you sure you want to delete this?" + "');");
    }
}

void btnAddNew_Click(object sender, EventArgs e)
{
    DataTable dataTable = new DataTable();
	
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	dataTable.Columns.Add("<%= SourceTable.Columns[i].Name %>",typeof(<%= GetCSharpVariableType(SourceTable.Columns[i]) %>));
	<% } %> 
	dataTable.Columns.Add("TotalPages", typeof(int));
	
    DataRow row = dataTable.NewRow();
	// TODO: set empty values
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	//row["<%= SourceTable.Columns[i].Name %>"] = 
	<% } %> 
    //row["TotalPages"] = 1;
    //dataTable.Rows.Add(row);

    spnPager.Visible = false;
    grd<%= GetClassName() %>.EditIndex = 0;
    grd<%= GetClassName() %>.DataSource = dataTable.DefaultView;
    grd<%= GetClassName() %>.DataBind();
	
	btnAddNew.Visible = false;

}



<script runat="template">


public string GetClassName()
	{
		//if (SourceTable.Name.EndsWith("s"))
		//{
		//	return RemovePrefix(SourceTable.Name.Substring(0,SourceTable.Name.Length -1));
		//}
		//else
		//{
			return RemovePrefix(SourceTable.Name);
		//}
	}

	public string RemovePrefix(string TableName)
	{
	
		return TableName.Replace(TablePrefix,"");
	}
	
	public string GetPrivateName(string ColumnName)
	{
		
	
		return ColumnName.Substring(0,1).ToLower() + ColumnName.Substring(1,ColumnName.Length -1);
	}
	
	public string GetParamName(String columnName)
	{
		if(columnName == "ID")
			return "id";
		
		string firstLetter = columnName.Substring(0,1).ToLower();
		string Result = firstLetter + columnName.Remove(0,1);
		
		return Result;
	}
	
	public string GetReaderConversion(ColumnSchema column)
	{
		if (column.Name.EndsWith("TypeCode")) return column.Name;
		
		switch (column.DataType)
		{
			case DbType.AnsiString: return "reader[\"" + column.Name + "\"].ToString();";
			case DbType.AnsiStringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
			case DbType.Binary: return "Byte[]";
			case DbType.Boolean: return "Convert.ToBoolean(reader[\"" + column.Name + "\"]);";
			case DbType.Byte: return "Convert.ToByte(reader[\"" + column.Name + "\"]);";
			case DbType.Currency: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);";
			case DbType.Date: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);";
			case DbType.DateTime: return "Convert.ToDateTime(reader[\"" + column.Name + "\"]);";
			case DbType.Decimal: return "Convert.ToDecimal(reader[\"" + column.Name + "\"]);";
			case DbType.Double: return "Convert.ToDouble(reader[\"" + column.Name + "\"]);";
			case DbType.Guid: return "new Guid(reader[\"" + column.Name + "\"].ToString());";
			case DbType.Int16: return "Convert.ToInt16(reader[\"" + column.Name + "\"]);";
			case DbType.Int32: return "Convert.ToInt32(reader[\"" + column.Name + "\"]);";
			case DbType.Int64: return "Convert.ToInt64(reader[\"" + column.Name + "\"]);";
			case DbType.SByte: return "Convert.ToSByte(reader[\"" + column.Name + "\"]);";
			case DbType.Single: return "Convert.ToSingle(reader[\"" + column.Name + "\"]);";
			case DbType.String: return "reader[\"" + column.Name + "\"].ToString();";
			case DbType.StringFixedLength: return "reader[\"" + column.Name + "\"].ToString();";
			
			default:
			{
				return "__UNKNOWN__" + column.NativeType;
			}
		}
	}
	
	

	public string GetVBDataType(ColumnSchema column)
	{
		if (column.Name.EndsWith("TypeCode")) return column.Name;
		
		switch (column.DataType)
		{
			case DbType.AnsiString: return "String";
			case DbType.AnsiStringFixedLength: return "String";
			case DbType.Binary: return "Byte()";
			case DbType.Boolean: return "Boolean";
			case DbType.Byte: return "Byte";
			case DbType.Currency: return "Decimal";
			case DbType.Date: return "DateTime";
			case DbType.DateTime: return "DateTime";
			case DbType.Decimal: return "Decimal";
			case DbType.Double: return "Double";
			case DbType.Guid: return "Guid";
			case DbType.Int16: return "Short";
			case DbType.Int32: return "Integer";
			case DbType.Int64: return "Long";
			case DbType.Object: return "Object";
			case DbType.SByte: return "SByte";
			case DbType.Single: return "Float";
			case DbType.String: return "String";
			case DbType.StringFixedLength: return "String";
			case DbType.Time: return "TimeSpan";
			case DbType.UInt16: return "UShort";
			case DbType.UInt32: return "UInt";
			case DbType.UInt64: return "ULong";
			case DbType.VarNumeric: return "Decimal";
			default:
			{
				return "__UNKNOWN__" + column.NativeType;
			}
		}
	}
	
</script>